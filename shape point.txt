白人女性

class FaceLandmarkDetector:
    def __init__(self, predictor_path):
        self.predictor_path = predictor_path
        self.detector = dlib.get_frontal_face_detector()
        self.predictor = dlib.shape_predictor(self.predictor_path)

    def detect_landmarks(self, pil_img, input_age_range=None, target_age_range=None):
        img = np.array(pil_img)
        dets = self.detector(img, 1)


        # 判断是否跳过检测
        if input_age_range < 0.1 and target_age_range < 0.1:
            return []
        if 0.1 <= input_age_range < 0.2 and 0.1 <= target_age_range < 0.2:
            return []
        if 0.2 <= input_age_range < 0.3 and 0.2 <= target_age_range < 0.3:
            return []
        if 0.3 <= input_age_range < 0.4 and 0.3 <= target_age_range < 0.4:
            return []
        if 0.4 <= input_age_range < 0.5 and 0.4 <= target_age_range < 0.5:
            return []
        if 0.5 <= input_age_range < 0.6 and 0.5 <= target_age_range < 0.6:
            return []
        if input_age_range >= 0.6 and target_age_range >= 0.6:
            return []

        if target_age_range < 0.1:
            target_age_range = (0.0, 0.1)
        elif 0.1 <= target_age_range < 0.2:
            target_age_range = (0.1, 0.2)
        elif 0.2 <= target_age_range < 0.3:
            target_age_range = (0.2, 0.3)
        elif 0.3 <= target_age_range < 0.4:
            target_age_range = (0.3, 0.4)
        elif 0.4 <= target_age_range < 0.5:
            target_age_range = (0.4, 0.5)
        elif 0.5 <= target_age_range < 0.6:
            target_age_range = (0.5, 0.6)
        else:
            target_age_range = (0.6, 0.8)

        if input_age_range < 0.1:
            #輸入年齡10-
            age_specific_points = {
                (0.1, 0.2): [8, 9, 7, 10, 6, 11, 30, 5, 57, 58, 56, 33, 59, 66, 67, 32, 55, 34, 65, 61],
                (0.2, 0.3): [8, 9, 7, 10, 6, 11, 57, 5, 58, 56, 30, 55, 59, 33, 12, 66, 67, 65, 32, 61],
                (0.3, 0.4): [8, 9, 7, 10, 6, 11, 5, 12, 57, 58, 56, 66, 67, 65, 4, 55, 59, 13, 30, 33],
                (0.4, 0.5): [8, 9, 7, 10, 6, 11, 5, 12, 4, 13, 3, 14, 56, 57, 65, 55, 66, 58, 67, 2],
                (0.5, 0.6): [ 9, 8, 7, 10, 6, 11, 5, 12, 13, 4, 14, 3, 15, 0, 16, 61, 2, 62, 67, 59],
                (0.6, 0.8): [9, 10, 8, 7, 6, 11, 5, 12, 4, 13, 3, 14, 2, 16, 15, 0, 1, 65, 66, 67]
            }
        elif 0.1 <= input_age_range < 0.2:
            #輸入年齡20-29
            age_specific_points = {
                (0.0, 0.1): [8, 9, 7, 10, 6, 11, 30, 5, 57, 58, 56, 33, 59, 66, 67, 32, 55, 34, 65, 61],
                (0.2, 0.3): [10, 9, 8, 7, 11, 6, 12, 0, 17, 57, 5, 56, 13, 58, 14, 55, 59, 4, 18, 48],
                (0.3, 0.4): [10, 9, 8, 7, 6, 11, 5, 12, 4, 13, 14, 3, 65, 66, 56, 15, 57, 67, 55, 58],
                (0.4, 0.5): [10, 11, 5, 6, 9, 8, 7, 4, 12, 13, 3, 14, 2, 15, 16, 1, 0, 65, 54, 55],
                (0.5, 0.6): [11, 10, 12, 13, 6, 5, 14, 9, 7, 15, 8, 16, 4, 3, 0, 1, 2, 48, 54, 17],
                (0.6, 0.8): [11, 5, 10, 6, 4, 12, 13, 3, 9, 16, 14, 15, 8, 7, 2, 1, 0, 54, 26, 17]
            }

        elif 0.2 <= input_age_range < 0.3:
            #輸入年齡20-29
            age_specific_points = {
                (0.0, 0.1): [8, 9, 7, 10, 6, 11, 57, 5, 58, 56, 30, 55, 59, 33, 12, 66, 67, 65, 32, 61],
                (0.1, 0.2): [10, 9, 8, 7, 11, 6, 12, 0, 17, 57, 5, 56, 13, 58, 14, 55, 59, 4, 18, 48],
                (0.3, 0.4): [5, 6, 4, 10, 8, 7, 9, 11, 3, 2, 12, 1, 0, 13, 48, 60, 14, 65, 64, 15],
                (0.4, 0.5): [5, 4, 3, 2, 6, 11, 1, 0, 10, 12, 13, 16, 9, 15, 7, 14, 8, 17, 26, 30],
                (0.5, 0.6): [11, 12, 5, 4, 13, 6, 14, 15, 10, 16, 3, 2, 1, 0, 7, 9, 17, 8, 30, 26],
                (0.6, 0.8): [5, 4, 3, 2, 1, 0, 11, 6, 12, 16, 15, 10, 13, 14, 26, 17, 9, 7, 8, 25]
            }

        elif 0.3 <= input_age_range < 0.4:
            #輸入年齡30-39
            age_specific_points = {
                (0.0, 0.1): [8, 9, 7, 10, 6, 11, 5, 12, 57, 58, 56, 66, 67, 65, 4, 55, 59, 13, 30, 33],
                (0.1, 0.2): [10, 9, 8, 7, 6, 11, 5, 12, 4, 13, 14, 3, 65, 66, 56, 15, 57, 67, 55, 58],
                (0.2, 0.3): [5, 6, 4, 10, 8, 7, 9, 11, 3, 2, 12, 1, 0, 13, 48, 60, 14, 65, 64, 15],
                (0.4, 0.5): [30, 3, 4, 0, 1, 2, 57, 5, 58, 56, 29, 16, 15, 33, 11, 34, 35, 14, 32, 28],
                (0.5, 0.6): [56, 57, 58, 16, 15, 13, 14, 12, 30, 55, 11, 66, 65, 29, 67, 48, 0, 59, 53, 54],
                (0.6, 0.8): [57, 0, 58, 16, 4, 3, 1, 56, 2, 15, 5, 14, 26, 11, 13, 12, 17, 30, 59, 29]
            }


        elif 0.4 <= input_age_range < 0.5:
            #輸入年齡40-49
            age_specific_points = {
                (0.0, 0.1): [8, 9, 7, 10, 6, 11, 5, 12, 4, 13, 3, 14, 56, 57, 65, 55, 66, 58, 67, 2],
                (0.1, 0.2): [10, 11, 5, 6, 9, 8, 7, 4, 12, 13, 3, 14, 2, 15, 16, 1, 0, 65, 54, 55],
                (0.2, 0.3): [5, 4, 3, 2, 6, 11, 1, 0, 10, 12, 13, 16, 9, 15, 7, 14, 8, 17, 26, 30],
                (0.3, 0.4): [ 30, 3, 4, 0, 1, 2, 57, 5, 58, 56, 29, 16, 15, 33, 11, 34, 35, 14, 32, 28],
                (0.5, 0.6): [56, 30, 16, 53, 63, 52, 55, 65, 57, 15, 62, 51, 29, 66, 14, 33, 58, 32, 13, 31],
                (0.6, 0.8): [15, 26, 16, 57, 58, 14, 56, 17, 0, 13, 12, 1, 4, 3, 11, 5, 25, 52, 2, 50]
            }

        elif 0.5 <= input_age_range < 0.6:
            #輸入年齡50-59
            age_specific_points = {
                (0.0, 0.1): [9, 8, 7, 10, 6, 11, 5, 12, 13, 4, 14, 3, 15, 0, 16, 61, 2, 62, 67, 59],
                (0.1, 0.2): [11, 10, 12, 13, 6, 5, 14, 9, 7, 15, 8, 16, 4, 3, 0, 1, 2, 48, 54, 17],
                (0.2, 0.3): [11, 12, 5, 4, 13, 6, 14, 15, 10, 16, 3, 2, 1, 0, 7, 9, 17, 8, 30, 26],
                (0.3, 0.4): [56, 57, 58, 16, 15, 13, 14, 12, 30, 55, 11, 66, 65, 29, 67, 48, 0, 59, 53, 54],
                (0.4, 0.5): [56, 30, 16, 53, 63, 52, 55, 65, 57, 15, 62, 51, 29, 66, 14, 33, 58, 32, 13, 31],
                (0.6, 0.8): [16, 15, 0, 14, 30, 3, 1, 2, 22, 63, 29, 65, 4, 13, 23, 26, 55, 33, 52, 56]
            }

        else:
            #輸入年齡60+
            age_specific_points = {
                (0.0, 0.1): [9, 10, 8, 7, 6, 11, 5, 12, 4, 13, 3, 14, 2, 16, 15, 0, 1, 65, 66, 67],
                (0.1, 0.2): [11, 5, 10, 6, 4, 12, 13, 3, 9, 16, 14, 15, 8, 7, 2, 1, 0, 54, 26, 17],
                (0.2, 0.3): [5, 4, 3, 2, 1, 0, 11, 6, 12, 16, 15, 10, 13, 14, 26, 17, 9, 7, 8, 25],
                (0.3, 0.4): [57, 0, 58, 16, 4, 3, 1, 56, 2, 15, 5, 14, 26, 11, 13, 12, 17, 30, 59, 29],
                (0.4, 0.5): [15, 26, 16, 57, 58, 14, 56, 17, 0, 13, 12, 1, 4, 3, 11, 5, 25, 52, 2, 50],
                (0.5, 0.6): [16, 15, 0, 14, 30, 3, 1, 2, 22, 63, 29, 65, 4, 13, 23, 26, 55, 33, 52, 56]
            }

        # print(f"input age_range: {input_age_range}")
        # print(f"age_range: {target_age_range}")
        # print(f"Available keys: {age_specific_points.keys()}")


        for k, d in enumerate(dets):
            landmarks = np.array([[p.x, p.y] for p in self.predictor(img, d).parts()])

            # Select specific points based on the provided age range
            if target_age_range in age_specific_points:
                selected_points = [landmarks[i] for i in age_specific_points[target_age_range]]
                # print(f"Shape of selected_points: {np.array(selected_points).shape}")


            else:
                # Default to all landmarks if no specific range is provided
                selected_points = landmarks

            return selected_points

        return []  # Return an empty list if no face detected

----------------------
白人女性
		#shape loss
		if self.opts.shape_lambda > 0:
			#input_ages = self.aging_loss.extract_ages(y) / 100.
			#target_ages = self.aging_loss.extract_ages(y_hat) / 100.
			#print(target_ages.shape)
			#print(input_ages.shape)
			for i in range(target_ages.size(0)):
				#print(target_ages[i].item())
				#points2_np = np.array(self.landmark_detector.detect_landmarks(common.tensor2im(y_hat[i])))
				points2_np = np.array(
					self.landmark_detector.detect_landmarks(common.tensor2im(y_hat[i]), input_ages[i].item(), target_ages[i].item()))

				if points2_np.shape == (20, 2):
					if input_ages[i].item() < 0.1:
						if 0.1 <= target_ages[i].item() < 0.2:
							points = [
								[127.73678963110667, 234.7048853439681],
								[144.69192422731805, 231.5024925224327],
								[110.78065802592224, 231.68594217347956],
								[160.03788634097708, 221.3928215353938],
								[95.32701894317049, 221.61316051844466],
								[174.160518444666, 209.2333000997009],
								[127.77068793619142, 156.10269192422732],
								[81.19042871385842, 209.41674975074775],
								[127.50947158524427, 201.74875373878365],
								[119.47258225324028, 200.8654037886341],
								[135.83250249252242, 200.7726819541376],
								[127.6221335992024, 169.17846460618145],
								[108.67796610169492, 195.85343968095714],
								[127.52043868394816, 192.80059820538384],
								[119.901296111665, 191.92821535393819],
								[120.27018943170488, 167.05284147557327],
								[146.59322033898306, 195.66101694915255],
								[135.0009970089731, 167.0309072781655],
								[135.45962113659024, 191.82552342971087],
								[120.06979062811565, 184.83748753738783]

							]
							total_distance = 0
							for j, point in enumerate(points):
								distance = np.linalg.norm(np.array(point) - points2_np[j])
								total_distance += distance

							loss_shape = total_distance / len(points)

							loss_dict[f'loss_shape_{data_type}'] = float(loss_shape)
							loss += loss_shape * self.opts.shape_lambda

						elif 0.2 <= target_ages[i].item() < 0.3:
							points = [
								[127.81248332888771, 237.33342224593224],
								[145.0040010669512, 234.14883969058417],
								[110.6983195518805, 234.1800480128034],
								[160.60656174979994, 223.99759935982928],
								[95.42998132835423, 223.8340890904241],
								[174.73512936783143, 211.4625233395572],
								[127.4793278207522, 203.51800480128034],
								[81.72526006935183, 211.09655908242198],
								[119.41691117631369, 202.57108562283275],
								[135.86689783942384, 202.53107495332088],
								[127.4153107495332, 156.99893304881303],
								[146.6126967191251, 197.2952787409976],
								[108.85942918111496, 197.38810349426512],
								[127.4507868765004, 170.14350493464923],
								[186.26540410776207, 196.51987196585756],
								[127.47025873566284, 194.20005334755936],
								[119.83782341957856, 193.25313416911177],
								[135.45158708989064, 193.2171245665511],
								[120.18831688450254, 167.86583088823687],
								[120.03414243798346, 185.9954654574553]

							]
							total_distance = 0
							for j, point in enumerate(points):
								distance = np.linalg.norm(np.array(point) - points2_np[j])
								total_distance += distance

							loss_shape = total_distance / len(points)

							loss_dict[f'loss_shape_{data_type}'] = float(loss_shape)
							loss += loss_shape * self.opts.shape_lambda

						elif 0.3 <= target_ages[i].item() < 0.4:
							points = [
								[127.83416698730281, 239.6552520200077],
								[145.48903424393998, 236.39476721816084],
								[110.17929973066565, 236.43170450173145],
								[161.35282801077338, 226.2439399769142],
								[94.37937668333974, 226.19392073874567],
								[175.62062331666024, 213.56098499422856],
								[80.24894190073105, 213.39976914197769],
								[186.96806464024624, 198.32358599461332],
								[127.56367833782224, 204.38514813389764],
								[119.04924971142748, 203.38207002693343],
								[136.39707579838398, 203.3716814159292],
								[127.57483647556752, 195.4609465178915],
								[119.47479799923047, 194.50096190842632],
								[136.03039630627165, 194.46363986148518],
								[68.97806848787995, 198.0650250096191],
								[147.67602924201617, 197.97691419776837],
								[107.85302039245863, 198.02000769526742],
								[194.1869949980762, 180.8834166987303],
								[127.69949980761831, 157.00654097729895],
								[127.64024624855713, 170.2851096575606]

							]
							total_distance = 0
							for j, point in enumerate(points):
								distance = np.linalg.norm(np.array(point) - points2_np[j])
								total_distance += distance

							loss_shape = total_distance / len(points)

							loss_dict[f'loss_shape_{data_type}'] = float(loss_shape)
							loss += loss_shape * self.opts.shape_lambda

						elif 0.4 <= target_ages[i].item() < 0.5:
							points = [
								[128.26762491444217, 239.74332648870637],
								[146.12799452429843, 236.46475017111567],
								[110.27789185489391, 236.621492128679],
								[162.11567419575633, 226.71115674195755],
								[94.04243668720055, 226.96098562628336],
								[176.4558521560575, 214.31964407939768],
								[79.50992470910336, 214.66666666666666],
								[187.5811088295688, 199.16153319644079],
								[68.2340862422998, 199.492128678987],
								[194.6009582477755, 181.80013689253937],
								[61.190965092402465, 182.11019849418207],
								[198.24845995893224, 163.23203285420945],
								[136.81108829568788, 202.00752908966462],
								[128.07118412046543, 202.9719370294319],
								[136.45311430527036, 193.6776180698152],
								[147.86173853524983, 197.14784394250515],
								[128.0677618069815, 194.62422997946612],
								[119.61806981519507, 202.06502395619438],
								[120.00273785078713, 193.76591375770022],
								[57.53114305270363, 163.52361396303903]

							]
							total_distance = 0
							for j, point in enumerate(points):
								distance = np.linalg.norm(np.array(point) - points2_np[j])
								total_distance += distance

							loss_shape = total_distance / len(points)

							loss_dict[f'loss_shape_{data_type}'] = float(loss_shape)
							loss += loss_shape * self.opts.shape_lambda

						elif 0.5 <= target_ages[i].item() < 0.6:
							points = [
								[145.5336787564767, 236.31088082901553],
								[127.41450777202073, 239.3678756476684],
								[109.41968911917098, 236.2901554404145],
								[161.9378238341969, 226.97927461139898],
								[93.53886010362694, 226.65284974093265],
								[176.85492227979276, 214.95336787564767],
								[79.33160621761658, 214.22279792746113],
								[188.3678756476684, 199.87046632124353],
								[195.65284974093265, 182.4663212435233],
								[68.36269430051813, 198.98445595854923],
								[199.43523316062175, 163.77202072538861],
								[61.56476683937824, 181.58549222797927],
								[201.41450777202073, 145.0],
								[56.19170984455958, 125.71502590673575],
								[202.04663212435233, 126.00518134715026],
								[119.50777202072538, 186.44041450777203],
								[57.943005181347154, 163.04145077720207],
								[127.05699481865285, 187.20725388601036],
								[119.33678756476684, 192.92746113989637],
								[108.44041450777202, 196.78756476683938]

							]
							total_distance = 0
							for j, point in enumerate(points):
								distance = np.linalg.norm(np.array(point) - points2_np[j])
								total_distance += distance

							loss_shape = total_distance / len(points)

							loss_dict[f'loss_shape_{data_type}'] = float(loss_shape)
							loss += loss_shape * self.opts.shape_lambda
						elif 0.6 <= target_ages[i].item() < 0.9:
							points = [
								[146.24624624624624, 236.32132132132134],
								[162.33033033033033, 227.06106106106105],
								[128.2802802802803, 239.4834834834835],
								[110.12512512512512, 236.45045045045046],
								[93.69669669669669, 227.25425425425425],
								[176.73073073073073, 215.1051051051051],
								[78.95995995995996, 215.2902902902903],
								[187.55155155155154, 200.05505505505505],
								[67.77477477477477, 200.20420420420422],
								[194.37637637637638, 182.73773773773775],
								[60.78278278278278, 182.84084084084085],
								[197.7947947947948, 164.23023023023023],
								[57.27827827827828, 164.28728728728728],
								[200.16316316316318, 126.98598598598599],
								[199.54754754754754, 145.73573573573574],
								[54.75775775775776, 126.70070070070071],
								[55.331331331331334, 145.57357357357358],
								[136.3843843843844, 193.47147147147146],
								[128.06806806806807, 194.32432432432432],
								[120.04104104104104, 193.4994994994995]

							]
							total_distance = 0
							for j, point in enumerate(points):
								distance = np.linalg.norm(np.array(point) - points2_np[j])
								total_distance += distance

							loss_shape = total_distance / len(points)

							loss_dict[f'loss_shape_{data_type}'] = float(loss_shape)
							loss += loss_shape * self.opts.shape_lambda

						else:
							continue

					elif 0.1 <= input_ages[i].item() < 0.2 :
						if target_ages[i].item() < 0.1:
							points = [
								[128.04488950276243, 226.74171270718233],
								[144.14709944751382, 223.6657458563536],
								[111.82665745856353, 223.91091160220995],
								[159.15883977900552, 214.68439226519337],
								[96.56491712707182, 215.11118784530387],
								[173.8439226519337, 204.2168508287293],
								[128.2389502762431, 151.37016574585635],
								[81.70027624309392, 204.71477900552486],
								[127.90262430939227, 197.0842541436464],
								[120.76381215469613, 196.39226519337018],
								[135.20787292817678, 196.3121546961326],
								[128.06837016574585, 164.7189226519337],
								[110.63743093922652, 192.22513812154696],
								[127.9053867403315, 188.83563535911603],
								[121.13950276243094, 188.1560773480663],
								[121.09944751381215, 163.1788674033149],
								[145.15055248618785, 191.99240331491714],
								[135.0207182320442, 163.14917127071823],
								[134.86878453038673, 188.03522099447514],
								[121.32803867403315, 181.44544198895028]

							]
							total_distance = 0
							for j, point in enumerate(points):
								distance = np.linalg.norm(np.array(point) - points2_np[j])
								total_distance += distance

							loss_shape = total_distance / len(points)

							loss_dict[f'loss_shape_{data_type}'] = float(loss_shape)
							loss += loss_shape * self.opts.shape_lambda

						elif 0.2 <= target_ages[i].item() < 0.3:
							points = [
								[160.60656174979994, 223.99759935982928],
								[145.0040010669512, 234.14883969058417],
								[127.81248332888771, 237.33342224593224],
								[110.6983195518805, 234.1800480128034],
								[174.73512936783143, 211.4625233395572],
								[95.42998132835423, 223.8340890904241],
								[186.26540410776207, 196.51987196585756],
								[56.976793811683116, 123.18298212856762],
								[70.27687383302214, 107.24833288877034],
								[127.4793278207522, 203.51800480128034],
								[81.72526006935183, 211.09655908242198],
								[135.86689783942384, 202.53107495332088],
								[193.72846092291277, 179.36062950120032],
								[119.41691117631369, 202.57108562283275],
								[197.80794878634302, 160.81808482261937],
								[146.6126967191251, 197.2952787409976],
								[108.85942918111496, 197.38810349426512],
								[70.51613763670312, 196.01146972526007],
								[79.39717257935449, 100.09655908242198],
								[98.4443851693785, 185.79167778074154]

							]
							total_distance = 0
							for j, point in enumerate(points):
								distance = np.linalg.norm(np.array(point) - points2_np[j])
								total_distance += distance

							loss_shape = total_distance / len(points)

							loss_dict[f'loss_shape_{data_type}'] = float(loss_shape)
							loss += loss_shape * self.opts.shape_lambda


						elif 0.3 <= target_ages[i].item() < 0.4:
							points = [
								[161.35282801077338, 226.2439399769142],
								[145.48903424393998, 236.39476721816084],
								[127.83416698730281, 239.6552520200077],
								[110.17929973066565, 236.43170450173145],
								[94.37937668333974, 226.19392073874567],
								[175.62062331666024, 213.56098499422856],
								[80.24894190073105, 213.39976914197769],
								[186.96806464024624, 198.32358599461332],
								[68.97806848787995, 198.0650250096191],
								[194.1869949980762, 180.8834166987303],
								[197.97652943439783, 162.20507887649094],
								[61.84801846864178, 180.63639861485186],
								[136.03039630627165, 194.46363986148518],
								[127.57483647556752, 195.4609465178915],
								[136.39707579838398, 203.3716814159292],
								[199.88380146210082, 143.45325125048095],
								[127.56367833782224, 204.38514813389764],
								[119.47479799923047, 194.50096190842632],
								[147.67602924201617, 197.97691419776837],
								[119.04924971142748, 203.38207002693343]

							]
							total_distance = 0
							for j, point in enumerate(points):
								distance = np.linalg.norm(np.array(point) - points2_np[j])
								total_distance += distance

							loss_shape = total_distance / len(points)

							loss_dict[f'loss_shape_{data_type}'] = float(loss_shape)
							loss += loss_shape * self.opts.shape_lambda

						elif 0.4 <= target_ages[i].item() < 0.5:
							points = [
								[162.11567419575633, 226.71115674195755],
								[176.4558521560575, 214.31964407939768],
								[79.50992470910336, 214.66666666666666],
								[94.04243668720055, 226.96098562628336],
								[146.12799452429843, 236.46475017111567],
								[128.26762491444217, 239.74332648870637],
								[110.27789185489391, 236.621492128679],
								[68.2340862422998, 199.492128678987],
								[187.5811088295688, 199.16153319644079],
								[194.6009582477755, 181.80013689253937],
								[61.190965092402465, 182.11019849418207],
								[198.24845995893224, 163.23203285420945],
								[57.53114305270363, 163.52361396303903],
								[200.04106776180697, 144.6002737850787],
								[200.41546885694729, 125.82203969883642],
								[55.60164271047228, 144.75427789185488],
								[55.251882272416154, 125.87268993839835],
								[136.45311430527036, 193.6776180698152],
								[158.6208076659822, 185.94455852156057],
								[147.86173853524983, 197.14784394250515]

							]
							total_distance = 0
							for j, point in enumerate(points):
								distance = np.linalg.norm(np.array(point) - points2_np[j])
								total_distance += distance

							loss_shape = total_distance / len(points)

							loss_dict[f'loss_shape_{data_type}'] = float(loss_shape)
							loss += loss_shape * self.opts.shape_lambda

						elif 0.5 <= target_ages[i].item() < 0.6:
							points = [
								[176.85492227979276, 214.95336787564767],
								[161.9378238341969, 226.97927461139898],
								[188.3678756476684, 199.87046632124353],
								[195.65284974093265, 182.4663212435233],
								[93.53886010362694, 226.65284974093265],
								[79.33160621761658, 214.22279792746113],
								[199.43523316062175, 163.77202072538861],
								[145.5336787564767, 236.31088082901553],
								[109.41968911917098, 236.2901554404145],
								[201.41450777202073, 145.0],
								[127.41450777202073, 239.3678756476684],
								[202.04663212435233, 126.00518134715026],
								[68.36269430051813, 198.98445595854923],
								[61.56476683937824, 181.58549222797927],
								[56.19170984455958, 125.71502590673575],
								[56.23834196891192, 144.46113989637306],
								[57.943005181347154, 163.04145077720207],
								[97.89637305699482, 186.84455958549222],
								[157.67357512953367, 186.65284974093265],
								[70.68911917098445, 109.39378238341969]

							]
							total_distance = 0
							for j, point in enumerate(points):
								distance = np.linalg.norm(np.array(point) - points2_np[j])
								total_distance += distance

							loss_shape = total_distance / len(points)

							loss_dict[f'loss_shape_{data_type}'] = float(loss_shape)
							loss += loss_shape * self.opts.shape_lambda
						elif 0.6 <= target_ages[i].item() < 0.9:
							points = [
								[176.73073073073073, 215.1051051051051],
								[78.95995995995996, 215.2902902902903],
								[162.33033033033033, 227.06106106106105],
								[93.69669669669669, 227.25425425425425],
								[67.77477477477477, 200.20420420420422],
								[187.55155155155154, 200.05505505505505],
								[194.37637637637638, 182.73773773773775],
								[60.78278278278278, 182.84084084084085],
								[146.24624624624624, 236.32132132132134],
								[200.16316316316318, 126.98598598598599],
								[197.7947947947948, 164.23023023023023],
								[199.54754754754754, 145.73573573573574],
								[128.2802802802803, 239.4834834834835],
								[110.12512512512512, 236.45045045045046],
								[57.27827827827828, 164.28728728728728],
								[55.331331331331334, 145.57357357357358],
								[54.75775775775776, 126.70070070070071],
								[158.42342342342343, 186.4974974974975],
								[185.23423423423424, 110.26726726726727],
								[70.21321321321321, 110.17117117117117]

							]
							total_distance = 0
							for j, point in enumerate(points):
								distance = np.linalg.norm(np.array(point) - points2_np[j])
								total_distance += distance

							loss_shape = total_distance / len(points)

							loss_dict[f'loss_shape_{data_type}'] = float(loss_shape)
							loss += loss_shape * self.opts.shape_lambda

						else:
							continue


					elif 0.2 <= input_ages[i].item() < 0.3 :
						if target_ages[i].item() < 0.1:
							points = [
								[128.04488950276243, 226.74171270718233],
								[144.14709944751382, 223.6657458563536],
								[111.82665745856353, 223.91091160220995],
								[159.15883977900552, 214.68439226519337],
								[96.56491712707182, 215.11118784530387],
								[173.8439226519337, 204.2168508287293],
								[127.90262430939227, 197.0842541436464],
								[81.70027624309392, 204.71477900552486],
								[120.76381215469613, 196.39226519337018],
								[135.20787292817678, 196.3121546961326],
								[128.2389502762431, 151.37016574585635],
								[145.15055248618785, 191.99240331491714],
								[110.63743093922652, 192.22513812154696],
								[128.06837016574585, 164.7189226519337],
								[185.73204419889504, 191.08701657458565],
								[127.9053867403315, 188.83563535911603],
								[121.13950276243094, 188.1560773480663],
								[134.86878453038673, 188.03522099447514],
								[121.09944751381215, 163.1788674033149],
								[121.32803867403315, 181.44544198895028]

							]
							total_distance = 0
							for j, point in enumerate(points):
								distance = np.linalg.norm(np.array(point) - points2_np[j])
								total_distance += distance

							loss_shape = total_distance / len(points)

							loss_dict[f'loss_shape_{data_type}'] = float(loss_shape)
							loss += loss_shape * self.opts.shape_lambda

						elif 0.1 <= target_ages[i].item() < 0.2:
							points = [
								[160.03788634097708, 221.3928215353938],
								[144.69192422731805, 231.5024925224327],
								[127.73678963110667, 234.7048853439681],
								[110.78065802592224, 231.68594217347956],
								[174.160518444666, 209.2333000997009],
								[95.32701894317049, 221.61316051844466],
								[185.67497507477566, 194.64007976071784],
								[55.31804586241276, 122.23030907278165],
								[68.83748753738783, 108.40378863409771],
								[127.50947158524427, 201.74875373878365],
								[81.19042871385842, 209.41674975074775],
								[135.83250249252242, 200.7726819541376],
								[193.0309072781655, 177.75174476570288],
								[119.47258225324028, 200.8654037886341],
								[196.9022931206381, 159.44765702891326],
								[146.59322033898306, 195.66101694915255],
								[108.67796610169492, 195.85343968095714],
								[69.63110667996013, 194.77467597208374],
								[78.15254237288136, 100.93918245264207],
								[97.77467597208374, 184.48354935194416]

							]
							total_distance = 0
							for j, point in enumerate(points):
								distance = np.linalg.norm(np.array(point) - points2_np[j])
								total_distance += distance

							loss_shape = total_distance / len(points)

							loss_dict[f'loss_shape_{data_type}'] = float(loss_shape)
							loss += loss_shape * self.opts.shape_lambda


						elif 0.3 <= target_ages[i].item() < 0.4:
							points = [
								[80.24894190073105, 213.39976914197769],
								[94.37937668333974, 226.19392073874567],
								[68.97806848787995, 198.0650250096191],
								[161.35282801077338, 226.2439399769142],
								[127.83416698730281, 239.6552520200077],
								[110.17929973066565, 236.43170450173145],
								[145.48903424393998, 236.39476721816084],
								[175.62062331666024, 213.56098499422856],
								[61.84801846864178, 180.63639861485186],
								[58.083878414774915, 162.05732974220854],
								[186.96806464024624, 198.32358599461332],
								[56.0808003078107, 143.25009619084264],
								[55.779530588687955, 124.35667564447864],
								[194.1869949980762, 180.8834166987303],
								[96.98845709888418, 185.71527510580992],
								[101.23662947287418, 186.53712966525586],
								[197.97652943439783, 162.20507887649094],
								[136.03039630627165, 194.46363986148518],
								[154.31165833012696, 186.53828395536746],
								[199.88380146210082, 143.45325125048095]

							]
							total_distance = 0
							for j, point in enumerate(points):
								distance = np.linalg.norm(np.array(point) - points2_np[j])
								total_distance += distance

							loss_shape = total_distance / len(points)

							loss_dict[f'loss_shape_{data_type}'] = float(loss_shape)
							loss += loss_shape * self.opts.shape_lambda

						elif 0.4 <= target_ages[i].item() < 0.5:
							points = [
								[79.50992470910336, 214.66666666666666],
								[68.2340862422998, 199.492128678987],
								[61.190965092402465, 182.11019849418207],
								[57.53114305270363, 163.52361396303903],
								[94.04243668720055, 226.96098562628336],
								[176.4558521560575, 214.31964407939768],
								[55.60164271047228, 144.75427789185488],
								[55.251882272416154, 125.87268993839835],
								[162.11567419575633, 226.71115674195755],
								[187.5811088295688, 199.16153319644079],
								[194.6009582477755, 181.80013689253937],
								[200.41546885694729, 125.82203969883642],
								[146.12799452429843, 236.46475017111567],
								[200.04106776180697, 144.6002737850787],
								[110.27789185489391, 236.621492128679],
								[198.24845995893224, 163.23203285420945],
								[128.26762491444217, 239.74332648870637],
								[70.25462012320328, 109.19986310746064],
								[185.44832306639287, 109.05201916495551],
								[128.49760438056126, 155.5201916495551]

							]
							total_distance = 0
							for j, point in enumerate(points):
								distance = np.linalg.norm(np.array(point) - points2_np[j])
								total_distance += distance

							loss_shape = total_distance / len(points)

							loss_dict[f'loss_shape_{data_type}'] = float(loss_shape)
							loss += loss_shape * self.opts.shape_lambda

						elif 0.5 <= target_ages[i].item() < 0.6:
							points = [
								[176.85492227979276, 214.95336787564767],
								[188.3678756476684, 199.87046632124353],
								[79.33160621761658, 214.22279792746113],
								[68.36269430051813, 198.98445595854923],
								[195.65284974093265, 182.4663212435233],
								[93.53886010362694, 226.65284974093265],
								[199.43523316062175, 163.77202072538861],
								[201.41450777202073, 145.0],
								[161.9378238341969, 226.97927461139898],
								[202.04663212435233, 126.00518134715026],
								[61.56476683937824, 181.58549222797927],
								[57.943005181347154, 163.04145077720207],
								[56.23834196891192, 144.46113989637306],
								[56.19170984455958, 125.71502590673575],
								[109.41968911917098, 236.2901554404145],
								[145.5336787564767, 236.31088082901553],
								[70.68911917098445, 109.39378238341969],
								[127.41450777202073, 239.3678756476684],
								[126.83937823834196, 155.16062176165804],
								[185.5544041450777, 109.02590673575129]

							]
							total_distance = 0
							for j, point in enumerate(points):
								distance = np.linalg.norm(np.array(point) - points2_np[j])
								total_distance += distance

							loss_shape = total_distance / len(points)

							loss_dict[f'loss_shape_{data_type}'] = float(loss_shape)
							loss += loss_shape * self.opts.shape_lambda
						elif 0.6 <= target_ages[i].item() < 0.9:
							points = [
								[78.95995995995996, 215.2902902902903],
								[67.77477477477477, 200.20420420420422],
								[60.78278278278278, 182.84084084084085],
								[57.27827827827828, 164.28728728728728],
								[55.331331331331334, 145.57357357357358],
								[54.75775775775776, 126.70070070070071],
								[176.73073073073073, 215.1051051051051],
								[93.69669669669669, 227.25425425425425],
								[187.55155155155154, 200.05505505505505],
								[200.16316316316318, 126.98598598598599],
								[199.54754754754754, 145.73573573573574],
								[162.33033033033033, 227.06106106106105],
								[194.37637637637638, 182.73773773773775],
								[197.7947947947948, 164.23023023023023],
								[185.23423423423424, 110.26726726726727],
								[70.21321321321321, 110.17117117117117],
								[146.24624624624624, 236.32132132132134],
								[110.12512512512512, 236.45045045045046],
								[128.2802802802803, 239.4834834834835],
								[176.9109109109109, 101.97297297297297]

							]
							total_distance = 0
							for j, point in enumerate(points):
								distance = np.linalg.norm(np.array(point) - points2_np[j])
								total_distance += distance

							loss_shape = total_distance / len(points)

							loss_dict[f'loss_shape_{data_type}'] = float(loss_shape)
							loss += loss_shape * self.opts.shape_lambda

						else:
							continue

					elif 0.3 <= input_ages[i].item() < 0.4 :
						if target_ages[i].item() < 0.1:
							points = [
								[128.04488950276243, 226.74171270718233],
								[144.14709944751382, 223.6657458563536],
								[111.82665745856353, 223.91091160220995],
								[159.15883977900552, 214.68439226519337],
								[96.56491712707182, 215.11118784530387],
								[173.8439226519337, 204.2168508287293],
								[81.70027624309392, 204.71477900552486],
								[185.73204419889504, 191.08701657458565],
								[127.90262430939227, 197.0842541436464],
								[120.76381215469613, 196.39226519337018],
								[135.20787292817678, 196.3121546961326],
								[127.9053867403315, 188.83563535911603],
								[121.13950276243094, 188.1560773480663],
								[134.86878453038673, 188.03522099447514],
								[69.65400552486187, 191.5842541436464],
								[145.15055248618785, 191.99240331491714],
								[110.63743093922652, 192.22513812154696],
								[193.12845303867402, 175.0628453038674],
								[128.2389502762431, 151.37016574585635],
								[128.06837016574585, 164.7189226519337]
							]
							total_distance = 0
							for j, point in enumerate(points):
								distance = np.linalg.norm(np.array(point) - points2_np[j])
								total_distance += distance

							loss_shape = total_distance / len(points)

							loss_dict[f'loss_shape_{data_type}'] = float(loss_shape)
							loss += loss_shape * self.opts.shape_lambda

						elif 0.1 <= target_ages[i].item() < 0.2:
							points = [
								[160.03788634097708, 221.3928215353938],
								[144.69192422731805, 231.5024925224327],
								[127.73678963110667, 234.7048853439681],
								[110.78065802592224, 231.68594217347956],
								[95.32701894317049, 221.61316051844466],
								[174.160518444666, 209.2333000997009],
								[81.19042871385842, 209.41674975074775],
								[185.67497507477566, 194.64007976071784],
								[69.63110667996013, 194.77467597208374],
								[193.0309072781655, 177.75174476570288],
								[196.9022931206381, 159.44765702891326],
								[62.25423728813559, 177.93519441674974],
								[135.45962113659024, 191.82552342971087],
								[127.52043868394816, 192.80059820538384],
								[135.83250249252242, 200.7726819541376],
								[199.00697906281155, 140.95014955134596],
								[127.50947158524427, 201.74875373878365],
								[119.901296111665, 191.92821535393819],
								[146.59322033898306, 195.66101694915255],
								[119.47258225324028, 200.8654037886341]

							]
							total_distance = 0
							for j, point in enumerate(points):
								distance = np.linalg.norm(np.array(point) - points2_np[j])
								total_distance += distance

							loss_shape = total_distance / len(points)

							loss_dict[f'loss_shape_{data_type}'] = float(loss_shape)
							loss += loss_shape * self.opts.shape_lambda

						elif 0.2 <= target_ages[i].item() < 0.3:
							points = [
								[81.72526006935183, 211.09655908242198],
								[95.42998132835423, 223.8340890904241],
								[70.51613763670312, 196.01146972526007],
								[160.60656174979994, 223.99759935982928],
								[127.81248332888771, 237.33342224593224],
								[110.6983195518805, 234.1800480128034],
								[145.0040010669512, 234.14883969058417],
								[174.73512936783143, 211.4625233395572],
								[63.275273406241666, 178.89010402774073],
								[59.317684715924244, 160.5241397706055],
								[186.26540410776207, 196.51987196585756],
								[57.25126700453454, 141.86049613230196],
								[56.976793811683116, 123.18298212856762],
								[193.72846092291277, 179.36062950120032],
								[98.4443851693785, 185.79167778074154],
								[102.67644705254735, 186.58842357962124],
								[197.80794878634302, 160.81808482261937],
								[135.45158708989064, 193.2171245665511],
								[152.9754601226994, 186.476393704988],
								[199.87676713790344, 142.1170978927714]

							]
							total_distance = 0
							for j, point in enumerate(points):
								distance = np.linalg.norm(np.array(point) - points2_np[j])
								total_distance += distance

							loss_shape = total_distance / len(points)

							loss_dict[f'loss_shape_{data_type}'] = float(loss_shape)
							loss += loss_shape * self.opts.shape_lambda

						elif 0.4 <= target_ages[i].item() < 0.5:
							points = [
								[128.49760438056126, 155.5201916495551],
								[61.190965092402465, 182.11019849418207],
								[68.2340862422998, 199.492128678987],
								[55.251882272416154, 125.87268993839835],
								[55.60164271047228, 144.75427789185488],
								[57.53114305270363, 163.52361396303903],
								[128.07118412046543, 202.9719370294319],
								[79.50992470910336, 214.66666666666666],
								[119.61806981519507, 202.06502395619438],
								[136.81108829568788, 202.00752908966462],
								[128.39219712525667, 143.16084873374402],
								[200.41546885694729, 125.82203969883642],
								[200.04106776180697, 144.6002737850787],
								[128.2772073921971, 169.34839151266257],
								[176.4558521560575, 214.31964407939768],
								[135.8986995208761, 166.9596167008898],
								[142.75633127994524, 164.19644079397673],
								[198.24845995893224, 163.23203285420945],
								[120.6611909650924, 166.95345653661875],
								[128.30869267624914, 131.16632443531827]

							]
							total_distance = 0
							for j, point in enumerate(points):
								distance = np.linalg.norm(np.array(point) - points2_np[j])
								total_distance += distance

							loss_shape = total_distance / len(points)

							loss_dict[f'loss_shape_{data_type}'] = float(loss_shape)
							loss += loss_shape * self.opts.shape_lambda

						elif 0.5 <= target_ages[i].item() < 0.6:
							points = [
								[135.46113989637306, 200.9740932642487],
								[127.03626943005182, 201.8860103626943],
								[118.9119170984456, 200.99481865284974],
								[202.04663212435233, 126.00518134715026],
								[201.41450777202073, 145.0],
								[195.65284974093265, 182.4663212435233],
								[199.43523316062175, 163.77202072538861],
								[188.3678756476684, 199.87046632124353],
								[126.83937823834196, 155.16062176165804],
								[146.40414507772022, 196.57512953367876],
								[176.85492227979276, 214.95336787564767],
								[127.02590673575129, 193.69948186528498],
								[135.17098445595855, 192.87046632124353],
								[127.03626943005182, 142.8134715025907],
								[119.33678756476684, 192.92746113989637],
								[97.89637305699482, 186.84455958549222],
								[56.19170984455958, 125.71502590673575],
								[108.44041450777202, 196.78756476683938],
								[146.21243523316062, 182.61139896373058],
								[157.67357512953367, 186.65284974093265]

							]
							total_distance = 0
							for j, point in enumerate(points):
								distance = np.linalg.norm(np.array(point) - points2_np[j])
								total_distance += distance

							loss_shape = total_distance / len(points)

							loss_dict[f'loss_shape_{data_type}'] = float(loss_shape)
							loss += loss_shape * self.opts.shape_lambda
						elif 0.6 <= target_ages[i].item() < 0.9:
							points = [
								[128.04704704704704, 201.83583583583584],
								[54.75775775775776, 126.70070070070071],
								[119.71371371371372, 200.95295295295296],
								[200.16316316316318, 126.98598598598599],
								[67.77477477477477, 200.20420420420422],
								[60.78278278278278, 182.84084084084085],
								[55.331331331331334, 145.57357357357358],
								[136.6906906906907, 200.94994994994994],
								[57.27827827827828, 164.28728728728728],
								[199.54754754754754, 145.73573573573574],
								[78.95995995995996, 215.2902902902903],
								[197.7947947947948, 164.23023023023023],
								[185.23423423423424, 110.26726726726727],
								[176.73073073073073, 215.1051051051051],
								[194.37637637637638, 182.73773773773775],
								[187.55155155155154, 200.05505505505505],
								[70.21321321321321, 110.17117117117117],
								[128.46946946946946, 155.42542542542543],
								[108.69069069069069, 196.7087087087087],
								[128.37537537537537, 143.12112112112112]
							]
							total_distance = 0
							for j, point in enumerate(points):
								distance = np.linalg.norm(np.array(point) - points2_np[j])
								total_distance += distance

							loss_shape = total_distance / len(points)

							loss_dict[f'loss_shape_{data_type}'] = float(loss_shape)
							loss += loss_shape * self.opts.shape_lambda

						else:
							continue

					elif 0.4 <= input_ages[i].item() < 0.5 :
						if target_ages[i].item() < 0.1:
							points = [
								[128.04488950276243, 226.74171270718233],
								[144.14709944751382, 223.6657458563536],
								[111.82665745856353, 223.91091160220995],
								[159.15883977900552, 214.68439226519337],
								[96.56491712707182, 215.11118784530387],
								[173.8439226519337, 204.2168508287293],
								[81.70027624309392, 204.71477900552486],
								[185.73204419889504, 191.08701657458565],
								[69.65400552486187, 191.5842541436464],
								[193.12845303867402, 175.0628453038674],
								[62.2078729281768, 175.5614640883978],
								[196.92127071823205, 157.40262430939225],
								[135.20787292817678, 196.3121546961326],
								[127.90262430939227, 197.0842541436464],
								[134.86878453038673, 188.03522099447514],
								[145.15055248618785, 191.99240331491714],
								[127.9053867403315, 188.83563535911603],
								[120.76381215469613, 196.39226519337018],
								[121.13950276243094, 188.1560773480663],
								[58.31560773480663, 157.86809392265192]

							]
							total_distance = 0
							for j, point in enumerate(points):
								distance = np.linalg.norm(np.array(point) - points2_np[j])
								total_distance += distance

							loss_shape = total_distance / len(points)

							loss_dict[f'loss_shape_{data_type}'] = float(loss_shape)
							loss += loss_shape * self.opts.shape_lambda

						elif 0.1 <= target_ages[i].item() < 0.2:
							points = [
								[160.03788634097708, 221.3928215353938],
								[174.160518444666, 209.2333000997009],
								[81.19042871385842, 209.41674975074775],
								[95.32701894317049, 221.61316051844466],
								[144.69192422731805, 231.5024925224327],
								[127.73678963110667, 234.7048853439681],
								[110.78065802592224, 231.68594217347956],
								[69.63110667996013, 194.77467597208374],
								[185.67497507477566, 194.64007976071784],
								[193.0309072781655, 177.75174476570288],
								[62.25423728813559, 177.93519441674974],
								[196.9022931206381, 159.44765702891326],
								[58.33000997008973, 159.69690927218346],
								[199.00697906281155, 140.95014955134596],
								[199.78863409770688, 122.10767696909272],
								[56.08075772681954, 141.0568295114656],
								[55.31804586241276, 122.23030907278165],
								[135.45962113659024, 191.82552342971087],
								[157.3678963110668, 184.31904287138585],
								[146.59322033898306, 195.66101694915255]

							]
							total_distance = 0
							for j, point in enumerate(points):
								distance = np.linalg.norm(np.array(point) - points2_np[j])
								total_distance += distance

							loss_shape = total_distance / len(points)

							loss_dict[f'loss_shape_{data_type}'] = float(loss_shape)
							loss += loss_shape * self.opts.shape_lambda

						elif 0.2 <= target_ages[i].item() < 0.3:
							points = [
								[81.72526006935183, 211.09655908242198],
								[70.51613763670312, 196.01146972526007],
								[63.275273406241666, 178.89010402774073],
								[59.317684715924244, 160.5241397706055],
								[95.42998132835423, 223.8340890904241],
								[174.73512936783143, 211.4625233395572],
								[57.25126700453454, 141.86049613230196],
								[56.976793811683116, 123.18298212856762],
								[160.60656174979994, 223.99759935982928],
								[186.26540410776207, 196.51987196585756],
								[193.72846092291277, 179.36062950120032],
								[200.35556148306216, 123.23366230994932],
								[145.0040010669512, 234.14883969058417],
								[199.87676713790344, 142.1170978927714],
								[110.6983195518805, 234.1800480128034],
								[197.80794878634302, 160.81808482261937],
								[127.81248332888771, 237.33342224593224],
								[70.27687383302214, 107.24833288877034],
								[185.57241931181647, 107.11016271005602],
								[127.4153107495332, 156.99893304881303]

							]
							total_distance = 0
							for j, point in enumerate(points):
								distance = np.linalg.norm(np.array(point) - points2_np[j])
								total_distance += distance

							loss_shape = total_distance / len(points)

							loss_dict[f'loss_shape_{data_type}'] = float(loss_shape)
							loss += loss_shape * self.opts.shape_lambda

						elif 0.3 <= target_ages[i].item() < 0.4:
							points = [
								[127.69949980761831, 157.00654097729895],
								[61.84801846864178, 180.63639861485186],
								[68.97806848787995, 198.0650250096191],
								[55.779530588687955, 124.35667564447864],
								[56.0808003078107, 143.25009619084264],
								[58.083878414774915, 162.05732974220854],
								[127.56367833782224, 204.38514813389764],
								[80.24894190073105, 213.39976914197769],
								[119.04924971142748, 203.38207002693343],
								[136.39707579838398, 203.3716814159292],
								[127.69680646402462, 144.37206617929974],
								[200.29395921508274, 124.52327818391689],
								[199.88380146210082, 143.45325125048095],
								[127.64024624855713, 170.2851096575606],
								[175.62062331666024, 213.56098499422856],
								[135.2608695652174, 167.85494420931127],
								[142.1331281262024, 165.0796460176991],
								[197.97652943439783, 162.20507887649094],
								[120.07464409388226, 167.83378222393227],
								[127.70450173143517, 132.02770296267795]

							]
							total_distance = 0
							for j, point in enumerate(points):
								distance = np.linalg.norm(np.array(point) - points2_np[j])
								total_distance += distance

							loss_shape = total_distance / len(points)

							loss_dict[f'loss_shape_{data_type}'] = float(loss_shape)
							loss += loss_shape * self.opts.shape_lambda

						elif 0.5 <= target_ages[i].item() < 0.6:
							points = [
								[135.46113989637306, 200.9740932642487],
								[126.83937823834196, 155.16062176165804],
								[202.04663212435233, 126.00518134715026],
								[146.21243523316062, 182.61139896373058],
								[135.03626943005182, 186.38341968911917],
								[134.98445595854923, 180.73056994818654],
								[146.40414507772022, 196.57512953367876],
								[135.17098445595855, 192.87046632124353],
								[127.03626943005182, 201.8860103626943],
								[201.41450777202073, 145.0],
								[127.05699481865285, 187.20725388601036],
								[127.03626943005182, 182.43523316062175],
								[127.03626943005182, 142.8134715025907],
								[127.02590673575129, 193.69948186528498],
								[199.43523316062175, 163.77202072538861],
								[126.98963730569949, 169.41450777202073],
								[118.9119170984456, 200.99481865284974],
								[119.41450777202073, 167.01554404145077],
								[195.65284974093265, 182.4663212435233],
								[112.34715025906736, 164.13989637305698]

							]
							total_distance = 0
							for j, point in enumerate(points):
								distance = np.linalg.norm(np.array(point) - points2_np[j])
								total_distance += distance

							loss_shape = total_distance / len(points)

							loss_dict[f'loss_shape_{data_type}'] = float(loss_shape)
							loss += loss_shape * self.opts.shape_lambda
						elif 0.6 <= target_ages[i].item() < 0.9:
							points = [
								[199.54754754754754, 145.73573573573574],
								[185.23423423423424, 110.26726726726727],
								[200.16316316316318, 126.98598598598599],
								[128.04704704704704, 201.83583583583584],
								[119.71371371371372, 200.95295295295296],
								[197.7947947947948, 164.23023023023023],
								[136.6906906906907, 200.94994994994994],
								[70.21321321321321, 110.17117117117117],
								[54.75775775775776, 126.70070070070071],
								[194.37637637637638, 182.73773773773775],
								[187.55155155155154, 200.05505505505505],
								[55.331331331331334, 145.57357357357358],
								[67.77477477477477, 200.20420420420422],
								[60.78278278278278, 182.84084084084085],
								[176.73073073073073, 215.1051051051051],
								[78.95995995995996, 215.2902902902903],
								[176.9109109109109, 101.97297297297297],
								[136.23023023023023, 180.6916916916917],
								[57.27827827827828, 164.28728728728728],
								[120.31231231231232, 180.60060060060061]

							]
							total_distance = 0
							for j, point in enumerate(points):
								distance = np.linalg.norm(np.array(point) - points2_np[j])
								total_distance += distance

							loss_shape = total_distance / len(points)

							loss_dict[f'loss_shape_{data_type}'] = float(loss_shape)
							loss += loss_shape * self.opts.shape_lambda

						else:
							continue


					elif 0.5 <= input_ages[i].item() < 0.6 :
						if target_ages[i].item() < 0.1:
							points = [
								[144.14709944751382, 223.6657458563536],
								[128.04488950276243, 226.74171270718233],
								[111.82665745856353, 223.91091160220995],
								[159.15883977900552, 214.68439226519337],
								[96.56491712707182, 215.11118784530387],
								[173.8439226519337, 204.2168508287293],
								[81.70027624309392, 204.71477900552486],
								[185.73204419889504, 191.08701657458565],
								[193.12845303867402, 175.0628453038674],
								[69.65400552486187, 191.5842541436464],
								[196.92127071823205, 157.40262430939225],
								[62.2078729281768, 175.5614640883978],
								[199.49792817679557, 139.36049723756906],
								[53.68991712707182, 120.83494475138122],
								[201.22444751381215, 120.69406077348066],
								[121.32803867403315, 181.44544198895028],
								[58.31560773480663, 157.86809392265192],
								[127.95994475138122, 182.11325966850828],
								[121.13950276243094, 188.1560773480663],
								[110.63743093922652, 192.22513812154696]

							]
							total_distance = 0
							for j, point in enumerate(points):
								distance = np.linalg.norm(np.array(point) - points2_np[j])
								total_distance += distance

							loss_shape = total_distance / len(points)

							loss_dict[f'loss_shape_{data_type}'] = float(loss_shape)
							loss += loss_shape * self.opts.shape_lambda

						elif 0.1 <= target_ages[i].item() < 0.2:
							points = [
								[174.160518444666, 209.2333000997009],
								[160.03788634097708, 221.3928215353938],
								[185.67497507477566, 194.64007976071784],
								[193.0309072781655, 177.75174476570288],
								[95.32701894317049, 221.61316051844466],
								[81.19042871385842, 209.41674975074775],
								[196.9022931206381, 159.44765702891326],
								[144.69192422731805, 231.5024925224327],
								[110.78065802592224, 231.68594217347956],
								[199.00697906281155, 140.95014955134596],
								[127.73678963110667, 234.7048853439681],
								[199.78863409770688, 122.10767696909272],
								[69.63110667996013, 194.77467597208374],
								[62.25423728813559, 177.93519441674974],
								[55.31804586241276, 122.23030907278165],
								[56.08075772681954, 141.0568295114656],
								[58.33000997008973, 159.69690927218346],
								[97.77467597208374, 184.48354935194416],
								[157.3678963110668, 184.31904287138585],
								[68.83748753738783, 108.40378863409771]

							]
							total_distance = 0
							for j, point in enumerate(points):
								distance = np.linalg.norm(np.array(point) - points2_np[j])
								total_distance += distance

							loss_shape = total_distance / len(points)

							loss_dict[f'loss_shape_{data_type}'] = float(loss_shape)
							loss += loss_shape * self.opts.shape_lambda


						elif 0.2 <= target_ages[i].item() < 0.3:
							points = [
								[174.73512936783143, 211.4625233395572],
								[186.26540410776207, 196.51987196585756],
								[81.72526006935183, 211.09655908242198],
								[70.51613763670312, 196.01146972526007],
								[193.72846092291277, 179.36062950120032],
								[95.42998132835423, 223.8340890904241],
								[197.80794878634302, 160.81808482261937],
								[199.87676713790344, 142.1170978927714],
								[160.60656174979994, 223.99759935982928],
								[200.35556148306216, 123.23366230994932],
								[63.275273406241666, 178.89010402774073],
								[59.317684715924244, 160.5241397706055],
								[57.25126700453454, 141.86049613230196],
								[56.976793811683116, 123.18298212856762],
								[110.6983195518805, 234.1800480128034],
								[145.0040010669512, 234.14883969058417],
								[70.27687383302214, 107.24833288877034],
								[127.81248332888771, 237.33342224593224],
								[127.4153107495332, 156.99893304881303],
								[185.57241931181647, 107.11016271005602]

							]
							total_distance = 0
							for j, point in enumerate(points):
								distance = np.linalg.norm(np.array(point) - points2_np[j])
								total_distance += distance

							loss_shape = total_distance / len(points)

							loss_dict[f'loss_shape_{data_type}'] = float(loss_shape)
							loss += loss_shape * self.opts.shape_lambda

						elif 0.3 <= target_ages[i].item() < 0.4:
							points = [
								[136.39707579838398, 203.3716814159292],
								[127.56367833782224, 204.38514813389764],
								[119.04924971142748, 203.38207002693343],
								[200.29395921508274, 124.52327818391689],
								[199.88380146210082, 143.45325125048095],
								[194.1869949980762, 180.8834166987303],
								[197.97652943439783, 162.20507887649094],
								[186.96806464024624, 198.32358599461332],
								[127.69949980761831, 157.00654097729895],
								[147.67602924201617, 197.97691419776837],
								[175.62062331666024, 213.56098499422856],
								[127.57483647556752, 195.4609465178915],
								[136.03039630627165, 194.46363986148518],
								[127.69680646402462, 144.37206617929974],
								[119.47479799923047, 194.50096190842632],
								[96.98845709888418, 185.71527510580992],
								[55.779530588687955, 124.35667564447864],
								[107.85302039245863, 198.02000769526742],
								[147.3062716429396, 181.86725663716814],
								[158.56136975759907, 185.716044632551]

							]
							total_distance = 0
							for j, point in enumerate(points):
								distance = np.linalg.norm(np.array(point) - points2_np[j])
								total_distance += distance

							loss_shape = total_distance / len(points)

							loss_dict[f'loss_shape_{data_type}'] = float(loss_shape)
							loss += loss_shape * self.opts.shape_lambda

						elif 0.4 <= target_ages[i].item() < 0.5:
							points = [
								[136.81108829568788, 202.00752908966462],
								[128.49760438056126, 155.5201916495551],
								[200.41546885694729, 125.82203969883642],
								[147.58384668035592, 181.73169062286107],
								[136.34154688569473, 185.43189596167008],
								[136.31279945242983, 179.87611225188226],
								[147.86173853524983, 197.14784394250515],
								[136.45311430527036, 193.6776180698152],
								[128.07118412046543, 202.9719370294319],
								[200.04106776180697, 144.6002737850787],
								[128.13483915126625, 186.28405201916496],
								[128.13963039014374, 181.54346338124572],
								[128.39219712525667, 143.16084873374402],
								[128.0677618069815, 194.62422997946612],
								[198.24845995893224, 163.23203285420945],
								[128.2772073921971, 169.34839151266257],
								[119.61806981519507, 202.06502395619438],
								[120.6611909650924, 166.95345653661875],
								[194.6009582477755, 181.80013689253937],
								[113.57837097878166, 164.09856262833677]

							]
							total_distance = 0
							for j, point in enumerate(points):
								distance = np.linalg.norm(np.array(point) - points2_np[j])
								total_distance += distance

							loss_shape = total_distance / len(points)

							loss_dict[f'loss_shape_{data_type}'] = float(loss_shape)
							loss += loss_shape * self.opts.shape_lambda
						elif 0.6 <= target_ages[i].item() < 0.9:
							points = [
								[200.16316316316318, 126.98598598598599],
								[199.54754754754754, 145.73573573573574],
								[54.75775775775776, 126.70070070070071],
								[197.7947947947948, 164.23023023023023],
								[128.46946946946946, 155.42542542542543],
								[60.78278278278278, 182.84084084084085],
								[55.331331331331334, 145.57357357357358],
								[57.27827827827828, 164.28728728728728],
								[140.18218218218217, 105.46146146146147],
								[136.27827827827826, 185.75175175175175],
								[128.37537537537537, 143.12112112112112],
								[136.3843843843844, 193.47147147147146],
								[67.77477477477477, 200.20420420420422],
								[194.37637637637638, 182.73773773773775],
								[151.92392392392392, 100.34934934934935],
								[185.23423423423424, 110.26726726726727],
								[147.66466466466466, 196.75875875875874],
								[128.21621621621622, 169.19019019019018],
								[136.23023023023023, 180.6916916916917],
								[136.6906906906907, 200.94994994994994]

							]
							total_distance = 0
							for j, point in enumerate(points):
								distance = np.linalg.norm(np.array(point) - points2_np[j])
								total_distance += distance

							loss_shape = total_distance / len(points)

							loss_dict[f'loss_shape_{data_type}'] = float(loss_shape)
							loss += loss_shape * self.opts.shape_lambda

						else:
							continue


					elif 0.6 <= input_ages[i].item() < 0.8 :
						if target_ages[i].item() < 0.1:
							points = [
								[144.14709944751382, 223.6657458563536],
								[159.15883977900552, 214.68439226519337],
								[128.04488950276243, 226.74171270718233],
								[111.82665745856353, 223.91091160220995],
								[96.56491712707182, 215.11118784530387],
								[173.8439226519337, 204.2168508287293],
								[81.70027624309392, 204.71477900552486],
								[185.73204419889504, 191.08701657458565],
								[69.65400552486187, 191.5842541436464],
								[193.12845303867402, 175.0628453038674],
								[62.2078729281768, 175.5614640883978],
								[196.92127071823205, 157.40262430939225],
								[58.31560773480663, 157.86809392265192],
								[201.22444751381215, 120.69406077348066],
								[199.49792817679557, 139.36049723756906],
								[53.68991712707182, 120.83494475138122],
								[55.485497237569064, 139.63328729281767],
								[134.86878453038673, 188.03522099447514],
								[127.9053867403315, 188.83563535911603],
								[121.13950276243094, 188.1560773480663]

							]
							total_distance = 0
							for j, point in enumerate(points):
								distance = np.linalg.norm(np.array(point) - points2_np[j])
								total_distance += distance

							loss_shape = total_distance / len(points)

							loss_dict[f'loss_shape_{data_type}'] = float(loss_shape)
							loss += loss_shape * self.opts.shape_lambda

						elif 0.1 <= target_ages[i].item() < 0.2:
							points = [
								[174.160518444666, 209.2333000997009],
								[81.19042871385842, 209.41674975074775],
								[160.03788634097708, 221.3928215353938],
								[95.32701894317049, 221.61316051844466],
								[69.63110667996013, 194.77467597208374],
								[185.67497507477566, 194.64007976071784],
								[193.0309072781655, 177.75174476570288],
								[62.25423728813559, 177.93519441674974],
								[144.69192422731805, 231.5024925224327],
								[199.78863409770688, 122.10767696909272],
								[196.9022931206381, 159.44765702891326],
								[199.00697906281155, 140.95014955134596],
								[127.73678963110667, 234.7048853439681],
								[110.78065802592224, 231.68594217347956],
								[58.33000997008973, 159.69690927218346],
								[56.08075772681954, 141.0568295114656],
								[55.31804586241276, 122.23030907278165],
								[157.3678963110668, 184.31904287138585],
								[186.06979062811564, 108.00099700897309],
								[68.83748753738783, 108.40378863409771]

							]
							total_distance = 0
							for j, point in enumerate(points):
								distance = np.linalg.norm(np.array(point) - points2_np[j])
								total_distance += distance

							loss_shape = total_distance / len(points)

							loss_dict[f'loss_shape_{data_type}'] = float(loss_shape)
							loss += loss_shape * self.opts.shape_lambda


						elif 0.2 <= target_ages[i].item() < 0.3:
							points = [
								[81.72526006935183, 211.09655908242198],
								[70.51613763670312, 196.01146972526007],
								[63.275273406241666, 178.89010402774073],
								[59.317684715924244, 160.5241397706055],
								[57.25126700453454, 141.86049613230196],
								[56.976793811683116, 123.18298212856762],
								[174.73512936783143, 211.4625233395572],
								[95.42998132835423, 223.8340890904241],
								[186.26540410776207, 196.51987196585756],
								[200.35556148306216, 123.23366230994932],
								[199.87676713790344, 142.1170978927714],
								[160.60656174979994, 223.99759935982928],
								[193.72846092291277, 179.36062950120032],
								[197.80794878634302, 160.81808482261937],
								[185.57241931181647, 107.11016271005602],
								[70.27687383302214, 107.24833288877034],
								[145.0040010669512, 234.14883969058417],
								[110.6983195518805, 234.1800480128034],
								[127.81248332888771, 237.33342224593224],
								[176.2878100826887, 100.04587890104028]

							]
							total_distance = 0
							for j, point in enumerate(points):
								distance = np.linalg.norm(np.array(point) - points2_np[j])
								total_distance += distance

							loss_shape = total_distance / len(points)

							loss_dict[f'loss_shape_{data_type}'] = float(loss_shape)
							loss += loss_shape * self.opts.shape_lambda

						elif 0.3 <= target_ages[i].item() < 0.4:
							points = [
								[127.56367833782224, 204.38514813389764],
								[55.779530588687955, 124.35667564447864],
								[119.04924971142748, 203.38207002693343],
								[200.29395921508274, 124.52327818391689],
								[68.97806848787995, 198.0650250096191],
								[61.84801846864178, 180.63639861485186],
								[56.0808003078107, 143.25009619084264],
								[136.39707579838398, 203.3716814159292],
								[58.083878414774915, 162.05732974220854],
								[199.88380146210082, 143.45325125048095],
								[80.24894190073105, 213.39976914197769],
								[197.97652943439783, 162.20507887649094],
								[185.59638322431704, 108.29242016160062],
								[175.62062331666024, 213.56098499422856],
								[194.1869949980762, 180.8834166987303],
								[186.96806464024624, 198.32358599461332],
								[69.9107348980377, 108.39976914197769],
								[127.69949980761831, 157.00654097729895],
								[107.85302039245863, 198.02000769526742],
								[127.69680646402462, 144.37206617929974]

							]
							total_distance = 0
							for j, point in enumerate(points):
								distance = np.linalg.norm(np.array(point) - points2_np[j])
								total_distance += distance

							loss_shape = total_distance / len(points)

							loss_dict[f'loss_shape_{data_type}'] = float(loss_shape)
							loss += loss_shape * self.opts.shape_lambda

						elif 0.4 <= target_ages[i].item() < 0.5:
							points = [
								[200.04106776180697, 144.6002737850787],
								[185.44832306639287, 109.05201916495551],
								[200.41546885694729, 125.82203969883642],
								[128.07118412046543, 202.9719370294319],
								[119.61806981519507, 202.06502395619438],
								[198.24845995893224, 163.23203285420945],
								[136.81108829568788, 202.00752908966462],
								[70.25462012320328, 109.19986310746064],
								[55.251882272416154, 125.87268993839835],
								[194.6009582477755, 181.80013689253937],
								[187.5811088295688, 199.16153319644079],
								[55.60164271047228, 144.75427789185488],
								[68.2340862422998, 199.492128678987],
								[61.190965092402465, 182.11019849418207],
								[176.4558521560575, 214.31964407939768],
								[79.50992470910336, 214.66666666666666],
								[176.7748117727584, 101.160848733744],
								[136.31279945242983, 179.87611225188226],
								[57.53114305270363, 163.52361396303903],
								[120.34223134839151, 179.80835044490075]

							]
							total_distance = 0
							for j, point in enumerate(points):
								distance = np.linalg.norm(np.array(point) - points2_np[j])
								total_distance += distance

							loss_shape = total_distance / len(points)

							loss_dict[f'loss_shape_{data_type}'] = float(loss_shape)
							loss += loss_shape * self.opts.shape_lambda
						elif 0.5 <= target_ages[i].item() < 0.6:
							points = [
								[202.04663212435233, 126.00518134715026],
								[201.41450777202073, 145.0],
								[56.19170984455958, 125.71502590673575],
								[199.43523316062175, 163.77202072538861],
								[126.83937823834196, 155.16062176165804],
								[61.56476683937824, 181.58549222797927],
								[56.23834196891192, 144.46113989637306],
								[57.943005181347154, 163.04145077720207],
								[139.29533678756476, 104.38341968911917],
								[135.03626943005182, 186.38341968911917],
								[127.03626943005182, 142.8134715025907],
								[135.17098445595855, 192.87046632124353],
								[68.36269430051813, 198.98445595854923],
								[195.65284974093265, 182.4663212435233],
								[151.32642487046633, 99.19689119170984],
								[185.5544041450777, 109.02590673575129],
								[146.40414507772022, 196.57512953367876],
								[126.98963730569949, 169.41450777202073],
								[134.98445595854923, 180.73056994818654],
								[135.46113989637306, 200.9740932642487]

							]
							total_distance = 0
							for j, point in enumerate(points):
								distance = np.linalg.norm(np.array(point) - points2_np[j])
								total_distance += distance

							loss_shape = total_distance / len(points)

							loss_dict[f'loss_shape_{data_type}'] = float(loss_shape)
							loss += loss_shape * self.opts.shape_lambda

						else:
							continue


					else :
						continue


				else:
					#print("Error: Unexpected shape for y_hat")
					continue

----------------------------------------------
